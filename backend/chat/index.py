import json
import os
from typing import Dict, Any, List
from openai import OpenAI

client = OpenAI(api_key=os.environ.get('OPENAI_API_KEY'))

SYSTEM_PROMPT = """–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–æ–ø–ª–æ—â–∞—Ç—å –∏—Ö –∏–¥–µ–∏ –≤ –≤–µ–±-—Å–∞–π—Ç—ã.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–≤–æ–µ–≥–æ –æ–±—â–µ–Ω–∏—è:
- –ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∏—á–Ω—ã–º
- –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–∏–∑–∞–π–Ω–µ, —Ñ—É–Ω–∫—Ü–∏—è—Ö, —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–¥–µ–∏ –∏ —Ä–µ—à–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è (–Ω–æ —É–º–µ—Ä–µ–Ω–Ω–æ)
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∞–π—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–π –æ –¥–µ—Ç–∞–ª—è—Ö: —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞, —Å—Ç–∏–ª—å, –≤–∞–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:
"–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è —Å –∫–æ—Ñ–µ–π–Ω–µ–π! üé® –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —É—é—Ç–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω. –ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ ‚Äî —Ç—ë–ø–ª—ã–µ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ —Ç–æ–Ω–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ —è—Ä–∫–æ–µ? –ò –Ω—É–∂–Ω–∞ –ª–∏ —Ñ–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤?"

"–ü–æ–Ω—è–ª! –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ —Å –≥–∞–ª–µ—Ä–µ–µ–π. ‚ú® –ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫–æ–π —Å—Ç–∏–ª—å –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ñ–æ—Ç–æ, –∏–ª–∏ –±–æ–ª–µ–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏? –ò —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–±–æ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å?"

–ù–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã "–Ω–∞—á–∏–Ω–∞–µ—à—å —Ä–∞–±–æ—Ç—É" –∏–ª–∏ "—Å–æ–∑–¥–∞—é –∫–æ–¥" ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—Å—É–∂–¥–∞–π –∏–¥–µ–∏ –∏ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞."""

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤
    Args: event —Å httpMethod, body (messages: List[{role, content}])
    Returns: HTTP response —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç –ò–ò
    '''
    method: str = event.get('httpMethod', 'GET')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-User-Id, X-Auth-Token',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    body_data = json.loads(event.get('body', '{}'))
    messages: List[Dict[str, str]] = body_data.get('messages', [])
    
    if not messages:
        return {
            'statusCode': 400,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Messages are required'}),
            'isBase64Encoded': False
        }
    
    openai_messages = [{'role': 'system', 'content': SYSTEM_PROMPT}]
    
    for msg in messages:
        if msg.get('role') in ['user', 'assistant']:
            openai_messages.append({
                'role': msg['role'],
                'content': msg['content']
            })
    
    completion = client.chat.completions.create(
        model='gpt-4o-mini',
        messages=openai_messages,
        temperature=0.8,
        max_tokens=800
    )
    
    assistant_reply = completion.choices[0].message.content
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps({
            'reply': assistant_reply,
            'model': 'gpt-4o-mini'
        }),
        'isBase64Encoded': False
    }
